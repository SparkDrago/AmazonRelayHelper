// ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      2024-10-05
// @description  try to take over the world!
// @author       You
// @match        https://relay.amazon.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=amazon.com
// @grant        GM_xmlhttpRequest
// @grant        GM.xmlHttpRequest
// ==/UserScript==

(function () {
  'use strict';
  console.log("Script run!");
  let originalEntities = localStorage.getItem('originalEntities');

  originalEntities = originalEntities ? JSON.parse(originalEntities) : [];

  // Function to send the POST request
  function sendRequest() {
    console.log("Sending request...");

    GM.xmlHttpRequest({
      method: "POST",
      url: "https://relay.amazon.com/api/tours/entities",  // Your desired URL
      headers: {
        "Accept": "application/json, text/plain, */*",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Accept-Language": "en-US,en;q=0.9,ar;q=0.8",
        "Connection": "keep-alive",
        "Content-Type": "application/json",
        "Cookie": "sess-time-owpus=2082787201l; sess-id-owpus=143-6960229-7615217; session-id=139-7732499-0405422; i18n-prefs=USD; sp-cdn=\"L5Z9:EG\"; ubid-owpus=130-7941784-5761519; session-token=\"MwWSDKXPFwCfXVVJ0riDoT+PtMeIY0EPR+f5A8X1n0ute0ZmYoLswGd+pT1XJAq5w0PSDC5gO0b6je+JjyGO26ijBFp+6RX5/Z1SWffGmU4hOoXGYH6WOIppU9GkWcbQEDDEmOm5KswhBPfHw8WIdOPdPQ+jS3qeU8807S9UIf5eB6yQ2ReVpQC55zFAzFDQIjQWZBIaHFAQGbGzNb3MM8qfKtbaOBkybhZJG4+3HHScSFN39X2XDpV/4VqTk1fwCo4yHkjDajxg1HotNHAjZHBDaP/v0gznbHll05/bZJ6A6L2UChQFPqcXrDW7yKjlgTKbOxw0n7/27zdpAgk1lri7tsUhw/DhzMkMEMSP6fclso4p7JL6jA==",
        "Host": "relay.amazon.com",
        "Origin": "https://relay.amazon.com",
        "Referer": "https://relay.amazon.com/tours/in-transit?ref=owp_nav_tours",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
        "sec-ch-ua": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\"",
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "\"Windows\"",
        "x-csrf-token": "g+Yu9lCFpfqGHY3cQbRDa2gqVdZ5UChOPOQ+FIcjEJG3AAAAAgAAAABnAI5ZcmF3AAAAAIIXF/5ED9rqj+J7i/USjw=="
      },
      data: JSON.stringify({ "blockSearchCriteria": null, "domicileFilters": [], "pageSize": 100, "sortOrderList": [{ "direction": "desc", "field": "IS_RETENDERED" }, { "direction": "desc", "field": "IS_UNACCEPTED" }, { "direction": "asc", "field": "START_DATE" }, { "direction": "asc", "field": "START_DATE" }], "tourSearchCriteria": { "driverEmails": [], "driverIds": [], "driverStatus": null, "ids": [], "isRetendered": null, "isRetenderedDiffRequired": true, "isTabsDataDateRangeApplicable": true, "loadTypeFilters": ["All"], "isRecommendationsFilterEnabled": false, "location": null, "pageNumber": 1, "pageStartItemToken": 0, "searchFilters": [], "stages": ["in-transit"], "startTime": "2024-09-14T21:00:00.000Z", "textSearchQuery": null, "trackingStatuses": [], "isOneWayTrip": null, "isRoundTrip": null, "isDelayed": null, "isDriverAssigned": null, "isAttentionNeeded": null } }),
 
      onload: function (response) {
        response = JSON.parse(response.responseText);

        if (!originalEntities) {
          originalEntities = response.entities || [];
          return;
        }

        let responseEntities = response.entities || [];

        const actionChecks = ['actualTime', 'plannedTime'];
        const loadChecks = ['loadType'];

        for (const entity of responseEntities) {
          const originalEntity = originalEntities.find(item => item.id === entity.id);

          if (!originalEntity) {
            continue;
          }

          const loads = entity.loads || [];

          if (loads.length !== originalEntity.loads.length) {
            const largerLoad = (originalEntity.loads.length > loads.length) ? originalEntity.loads : loads;
            const smallerLoad = (originalEntity.loads.length < loads.length) ? originalEntity.loads : loads;

            const changedLoads = largerLoad.filter(item => !smallerLoad.find(smallerItem => item.versionedLoadId.id === smallerItem.versionedLoadId.id));

            showNotification(`Loads were altered on ${originalEntity.resourceBlock.id}: ${changedLoads.map(item => item.versionedLoadId.id).join(", ")}`);
          }

          for (const load of loads) {
            const originalLoad = originalEntity.loads.find(item => item.versionedLoadId.id === load.versionedLoadId.id);

            if (!originalLoad) {
              continue;
            }

            for (const field of loadChecks) {
              if (load[field] !== originalLoad[field]) {
                showNotification(`Entity ${originalEntity.resourceBlock.id} Changed: ${field} Changed on load ${load.versionedLoadId.id} From ${originalLoad[field]} to ${load[field]}`);
              }
            }

            for (const stop of load.stops) {
              const originalStop = originalLoad.stops.find(item => item.stopId === stop.stopId);

              if (!originalStop) {
                continue;
              }

              for (const action of stop.actions) {
                const originalAction = originalStop.actions.find(item => item.type === action.type);

                for (const field of actionChecks) {
                  if (action[field] !== originalAction[field]) {
                    showNotification(`Entity ${originalEntity.resourceBlock.id} Changed: ${field} Changed on load ${load.versionedLoadId.id} of Type ${action.type} From ${originalAction[field]} to ${action[field]}`);
                  }
                }
              }
            }
          }
        }

        originalEntities = response.entities || [];

        localStorage.setItem('originalEntities', JSON.stringify(originalEntities));
      },
      onerror: function (error) {
        console.log("Request failed:", error);
      }
    });
  }


  const playSound = () => {
    const audio = new Audio('https://dw.zobj.net/download/v1/beeoEPjtvFihprVkUZRJqcP3yKx_tjbYZcqlhAgUmazaUGUbfX2mGBz_g6QnuHnaTGDj-88ZSGcEZ7opwJf_X_mj9O6B5G0TijV_l-SWRrrCQpbaV1NCW2c-jpf8/?a=&c=72&f=pikachu_d.mp3&special=1728098481-L8uD%2Fs9ENqcwLjsAaL630cvFCPN2Rdp3VQVUl0oeIfs%3D'); // Replace with desired sound file URL
    audio.play();
  };


  // Function to show notification
  const showNotification = (body) => {
    console.log(body);
    const notificationId = `notification-${Date.now()}`;

    // Create the notification div
    const notificationDiv = document.createElement('div');
    notificationDiv.id = notificationId; // Assign the unique ID
    notificationDiv.style.position = 'fixed';
    notificationDiv.style.bottom = '10px';
    notificationDiv.style.right = '10px';
    notificationDiv.style.padding = '15px';
    notificationDiv.style.backgroundColor = '#f0f0f0';
    notificationDiv.style.border = '1px solid #ccc';
    notificationDiv.style.zIndex = '1000';
    notificationDiv.style.boxShadow = '0 0 5px rgba(0,0,0,0.3)';
    notificationDiv.style.borderRadius = '5px';

    // Add notification content (title and body)
    notificationDiv.innerHTML = `
        <strong>Notification!</strong><br>${body}
        <br><button id="closeNotification-${notificationId}" style="
            margin-top: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 3px;
            ">Close</button>
    `;

    // Append notification to the body
    document.body.appendChild(notificationDiv);

    // Add event listener to the close button
    notificationDiv.querySelector(`#closeNotification-${notificationId}`).addEventListener('click', () => {
      document.body.removeChild(notificationDiv);
    });

    playSound();
  };


  // Call sendRequest every 30 seconds (30000 milliseconds)
  setInterval(sendRequest, 30000);

  // Initial call to send the first request immediately
  sendRequest();

})();
